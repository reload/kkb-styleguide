@charset "UTF-8";
// Breakpoints
// ==========================================================================

$breakpoint-low:                  580px;
$breakpoint-small:                480px;
$breakpoint-medium:               768px;
$breakpoint-large:                940px;
$breakpoint-x-large:              1210px;


// Media query
// ==========================================================================

@mixin respond-to($media) {
	// Sizes
	@if $media == small {
		@media only screen and (max-width: $breakpoint-small) { @content; }
	}

	@else if $media == small-medium {
		@media only screen and (max-width: $breakpoint-medium) { @content; }
	}

  @if $media == small-medium-low {
    @media only screen and (max-height: $breakpoint-low) and (max-width: $breakpoint-medium) { @content; }
  }

	@else if $media == medium {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-medium) { @content; }
	}

	@else if $media == medium-large {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-large) { @content; }
	}

	@else if $media == large {
		@media only screen and (min-width: $breakpoint-medium + 1) and (max-width: $breakpoint-large) { @content; }
	}

	@else if $media == x-large {
		@media only screen and (min-width: $breakpoint-x-large + 1) { @content; }
	}

  @else if $media == large-x-large {
    @media only screen and (min-width: $breakpoint-medium + 1) { @content; }
  }
}


// Breakpoints
// ==========================================================================

@mixin small {
  @include respond-to(small) { @content; }
}

@mixin small-medium {
  @include respond-to(small-medium) { @content; }
}

@mixin small-medium-low {
  @include respond-to(small-medium-low) { @content; }
}

@mixin medium {
  @include respond-to(medium) { @content; }
}

@mixin medium-large {
  @include respond-to(medium-large) { @content; }
}

@mixin large {
  @include respond-to(large) { @content; }
}

@mixin x-large {
  @include respond-to(x-large) { @content; }
}

@mixin large-x-large {
  @include respond-to(large-x-large) { @content; }
}
